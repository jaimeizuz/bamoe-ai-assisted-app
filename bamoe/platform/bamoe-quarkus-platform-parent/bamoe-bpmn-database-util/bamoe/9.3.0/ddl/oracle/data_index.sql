CREATE TABLE ATTACHMENTS (
  ID VARCHAR2(255) NOT NULL,
  CONTENT VARCHAR2(255),
  NAME VARCHAR2(255),
  UPDATED_AT TIMESTAMP(6),
  UPDATED_BY VARCHAR2(255),
  TASK_ID VARCHAR2(255) NOT NULL
  ,CONSTRAINT ATTACHMENTS_PKEY PRIMARY KEY (ID)
);

CREATE TABLE COMMENTS (
  ID VARCHAR2(255) NOT NULL,
  CONTENT VARCHAR2(1000),
  UPDATED_AT TIMESTAMP(6),
  UPDATED_BY VARCHAR2(255),
  TASK_ID VARCHAR2(255) NOT NULL
  ,CONSTRAINT COMMENTS_PKEY PRIMARY KEY (ID)
);

CREATE TABLE DEFINITIONS (
  ID VARCHAR2(255) NOT NULL,
  VERSION VARCHAR2(255) NOT NULL,
  NAME VARCHAR2(255),
  TYPE VARCHAR2(255),
  SOURCE BLOB,
  ENDPOINT VARCHAR2(255),
  DESCRIPTION VARCHAR2(255),
  METADATA CLOB
  ,CONSTRAINT DEFINITIONS_PKEY PRIMARY KEY (ID, VERSION)
);

CREATE TABLE DEFINITIONS_ADDONS (
  PROCESS_ID VARCHAR2(255) NOT NULL,
  PROCESS_VERSION VARCHAR2(255) NOT NULL,
  ADDON VARCHAR2(255) NOT NULL
  ,CONSTRAINT DEFINITIONS_ADDONS_PKEY PRIMARY KEY (PROCESS_ID, PROCESS_VERSION, ADDON)
);

CREATE TABLE DEFINITIONS_ANNOTATIONS (
  ANNOTATION VARCHAR2(255) NOT NULL,
  PROCESS_ID VARCHAR2(255) NOT NULL,
  PROCESS_VERSION VARCHAR2(255) NOT NULL
  ,CONSTRAINT DEFINITIONS_ANNOTATIONS_PKEY PRIMARY KEY (ANNOTATION, PROCESS_ID, PROCESS_VERSION)
);

CREATE TABLE DEFINITIONS_METADATA (
  PROCESS_ID VARCHAR2(255) NOT NULL,
  PROCESS_VERSION VARCHAR2(255) NOT NULL,
  META_VALUE VARCHAR2(255),
  NAME VARCHAR2(255) NOT NULL
  ,CONSTRAINT DEFINITIONS_METADATA_PKEY PRIMARY KEY (PROCESS_ID, PROCESS_VERSION, NAME)
);

CREATE TABLE DEFINITIONS_NODES (
  ID VARCHAR2(255) NOT NULL,
  NAME VARCHAR2(255),
  UNIQUE_ID VARCHAR2(255),
  TYPE VARCHAR2(255),
  PROCESS_ID VARCHAR2(255) NOT NULL,
  PROCESS_VERSION VARCHAR2(255) NOT NULL
  ,CONSTRAINT DEFINITIONS_NODES_PKEY PRIMARY KEY (ID, PROCESS_ID, PROCESS_VERSION)
);

CREATE TABLE DEFINITIONS_NODES_METADATA (
  NODE_ID VARCHAR2(255) NOT NULL,
  PROCESS_ID VARCHAR2(255) NOT NULL,
  PROCESS_VERSION VARCHAR2(255) NOT NULL,
  META_VALUE VARCHAR2(255),
  NAME VARCHAR2(255) NOT NULL
  ,CONSTRAINT DEFINITIONS_NODES_METADATA_PKEY PRIMARY KEY (NODE_ID, PROCESS_ID, PROCESS_VERSION, NAME)
);

CREATE TABLE DEFINITIONS_ROLES (
  PROCESS_ID VARCHAR2(255) NOT NULL,
  PROCESS_VERSION VARCHAR2(255) NOT NULL,
  ROLE VARCHAR2(255) NOT NULL
  ,CONSTRAINT DEFINITIONS_ROLES_PKEY PRIMARY KEY (PROCESS_ID, PROCESS_VERSION, ROLE)
);

CREATE TABLE JOBS (
  ID VARCHAR2(255) NOT NULL,
  CALLBACK_ENDPOINT VARCHAR2(255),
  ENDPOINT VARCHAR2(255),
  EXECUTION_COUNTER NUMBER,
  EXPIRATION_TIME TIMESTAMP(6),
  LAST_UPDATE TIMESTAMP(6),
  NODE_INSTANCE_ID VARCHAR2(255),
  PRIORITY NUMBER,
  PROCESS_ID VARCHAR2(255),
  PROCESS_INSTANCE_ID VARCHAR2(255),
  REPEAT_INTERVAL NUMBER(19,0),
  REPEAT_LIMIT NUMBER,
  RETRIES NUMBER,
  ROOT_PROCESS_ID VARCHAR2(255),
  ROOT_PROCESS_INSTANCE_ID VARCHAR2(255),
  SCHEDULED_ID VARCHAR2(255),
  STATUS VARCHAR2(255)
  ,CONSTRAINT JOBS_PKEY PRIMARY KEY (ID)
);

CREATE TABLE KOGITO_DATA_CACHE (
  VAR_NAME VARCHAR2(255) NOT NULL,
  CACHE_NAME VARCHAR2(255) NOT NULL,
  JSON_VALUE CLOB
  ,CONSTRAINT KOGITO_DATA_CACHE_PKEY PRIMARY KEY (VAR_NAME, CACHE_NAME)
);

CREATE TABLE MILESTONES (
  ID VARCHAR2(255) NOT NULL,
  PROCESS_INSTANCE_ID VARCHAR2(255) NOT NULL,
  NAME VARCHAR2(255),
  STATUS VARCHAR2(255)
  ,CONSTRAINT MILESTONES_PKEY PRIMARY KEY (ID, PROCESS_INSTANCE_ID)
);

CREATE TABLE NODES (
  ID VARCHAR2(255) NOT NULL,
  DEFINITION_ID VARCHAR2(255),
  ENTER TIMESTAMP(6),
  EXIT TIMESTAMP(6),
  NAME VARCHAR2(255),
  NODE_ID VARCHAR2(255),
  TYPE VARCHAR2(255),
  PROCESS_INSTANCE_ID VARCHAR2(255) NOT NULL,
  SLA_DUE_DATE TIMESTAMP(6),
  RETRIGGER NUMBER(1,0),
  ERROR_MESSAGE CLOB,
  CANCEL_TYPE VARCHAR2(255)
  ,CONSTRAINT NODES_PKEY PRIMARY KEY (ID)
);

CREATE TABLE PROCESSES (
  ID VARCHAR2(255) NOT NULL,
  BUSINESS_KEY VARCHAR2(255),
  END_TIME TIMESTAMP(6),
  ENDPOINT VARCHAR2(255),
  MESSAGE CLOB,
  NODE_DEFINITION_ID VARCHAR2(255),
  LAST_UPDATE_TIME TIMESTAMP(6),
  PARENT_PROCESS_INSTANCE_ID VARCHAR2(255),
  PROCESS_ID VARCHAR2(255),
  PROCESS_NAME VARCHAR2(255),
  ROOT_PROCESS_ID VARCHAR2(255),
  ROOT_PROCESS_INSTANCE_ID VARCHAR2(255),
  START_TIME TIMESTAMP(6),
  STATE NUMBER(10,0),
  VARIABLES CLOB,
  VERSION VARCHAR2(255),
  CREATED_BY CLOB,
  UPDATED_BY CLOB,
  SLA_DUE_DATE TIMESTAMP(6),
  NODE_INSTANCE_ID VARCHAR2(255),
  CLOUD_EVENT_ID VARCHAR2(1000),
  CLOUD_EVENT_SOURCE VARCHAR2(1000)
  ,CONSTRAINT PROCESSES_PKEY PRIMARY KEY (ID)
);

CREATE TABLE PROCESSES_ADDONS (
  PROCESS_ID VARCHAR2(255) NOT NULL,
  ADDON VARCHAR2(255) NOT NULL
  ,CONSTRAINT PROCESSES_ADDONS_PKEY PRIMARY KEY (PROCESS_ID, ADDON)
);

CREATE TABLE PROCESSES_ROLES (
  PROCESS_ID VARCHAR2(255) NOT NULL,
  ROLE VARCHAR2(255) NOT NULL
  ,CONSTRAINT PROCESSES_ROLES_PKEY PRIMARY KEY (PROCESS_ID, ROLE)
);

CREATE TABLE TASKS (
  ID VARCHAR2(255) NOT NULL,
  ACTUAL_OWNER VARCHAR2(255),
  COMPLETED TIMESTAMP(6),
  DESCRIPTION VARCHAR2(255),
  ENDPOINT VARCHAR2(255),
  INPUTS CLOB,
  LAST_UPDATE TIMESTAMP(6),
  NAME VARCHAR2(255),
  OUTPUTS CLOB,
  PRIORITY VARCHAR2(255),
  PROCESS_ID VARCHAR2(255),
  PROCESS_INSTANCE_ID VARCHAR2(255),
  REFERENCE_NAME VARCHAR2(255),
  ROOT_PROCESS_ID VARCHAR2(255),
  ROOT_PROCESS_INSTANCE_ID VARCHAR2(255),
  STARTED TIMESTAMP(6),
  STATE VARCHAR2(255),
  EXTERNAL_REFERENCE_ID VARCHAR2(4000),
  SLA_DUE_DATE TIMESTAMP(6)
  ,CONSTRAINT TASKS_PKEY PRIMARY KEY (ID)
);

CREATE TABLE TASKS_ADMIN_GROUPS (
  TASK_ID VARCHAR2(255) NOT NULL,
  GROUP_ID VARCHAR2(255) NOT NULL
  ,CONSTRAINT TASKS_ADMIN_GROUPS_PKEY PRIMARY KEY (TASK_ID, GROUP_ID)
);

CREATE TABLE TASKS_ADMIN_USERS (
  TASK_ID VARCHAR2(255) NOT NULL,
  USER_ID VARCHAR2(255) NOT NULL
  ,CONSTRAINT TASKS_ADMIN_USERS_PKEY PRIMARY KEY (TASK_ID, USER_ID)
);

CREATE TABLE TASKS_EXCLUDED_USERS (
  TASK_ID VARCHAR2(255) NOT NULL,
  USER_ID VARCHAR2(255) NOT NULL
  ,CONSTRAINT TASKS_EXCLUDED_USERS_PKEY PRIMARY KEY (TASK_ID, USER_ID)
);

CREATE TABLE TASKS_POTENTIAL_GROUPS (
  TASK_ID VARCHAR2(255) NOT NULL,
  GROUP_ID VARCHAR2(255) NOT NULL
  ,CONSTRAINT TASKS_POTENTIAL_GROUPS_PKEY PRIMARY KEY (TASK_ID, GROUP_ID)
);

CREATE TABLE TASKS_POTENTIAL_USERS (
  TASK_ID VARCHAR2(255) NOT NULL,
  USER_ID VARCHAR2(255) NOT NULL
  ,CONSTRAINT TASKS_POTENTIAL_USERS_PKEY PRIMARY KEY (TASK_ID, USER_ID)
);

ALTER TABLE ATTACHMENTS ADD CONSTRAINT FK_ATTACHMENTS_TASKS FOREIGN KEY (TASK_ID) REFERENCES TASKS (ID) ON DELETE CASCADE;

ALTER TABLE COMMENTS ADD CONSTRAINT FK_COMMENTS_TASKS FOREIGN KEY (TASK_ID) REFERENCES TASKS (ID) ON DELETE CASCADE;

ALTER TABLE DEFINITIONS_ADDONS ADD CONSTRAINT FK_DEFINITIONS_ADDONS_DEFINITIONS FOREIGN KEY (PROCESS_ID, PROCESS_VERSION) REFERENCES DEFINITIONS (ID, VERSION) ON DELETE CASCADE;

ALTER TABLE DEFINITIONS_ANNOTATIONS ADD CONSTRAINT FK_DEFINITIONS_ANNOTATIONS FOREIGN KEY (PROCESS_ID, PROCESS_VERSION) REFERENCES DEFINITIONS (ID, VERSION) ON DELETE CASCADE;

ALTER TABLE DEFINITIONS_NODES ADD CONSTRAINT FK_DEFINITIONS_NODES_DEFINITIONS FOREIGN KEY (PROCESS_ID, PROCESS_VERSION) REFERENCES DEFINITIONS (ID, VERSION) ON DELETE CASCADE;

ALTER TABLE DEFINITIONS_NODES_METADATA ADD CONSTRAINT FK_DEFINITIONS_NODES_METADATA_DEFINITIONS_NODES FOREIGN KEY (NODE_ID, PROCESS_ID, PROCESS_VERSION) REFERENCES DEFINITIONS_NODES (ID, PROCESS_ID, PROCESS_VERSION) ON DELETE CASCADE;

ALTER TABLE DEFINITIONS_ROLES ADD CONSTRAINT FK_DEFINITIONS_ROLES_DEFINITIONS FOREIGN KEY (PROCESS_ID, PROCESS_VERSION) REFERENCES DEFINITIONS (ID, VERSION) ON DELETE CASCADE;

ALTER TABLE MILESTONES ADD CONSTRAINT FK_MILESTONES_PROCESS FOREIGN KEY (PROCESS_INSTANCE_ID) REFERENCES PROCESSES (ID) ON DELETE CASCADE;

ALTER TABLE NODES ADD CONSTRAINT FK_NODES_PROCESS FOREIGN KEY (PROCESS_INSTANCE_ID) REFERENCES PROCESSES (ID) ON DELETE CASCADE;

ALTER TABLE PROCESSES_ADDONS ADD CONSTRAINT FK_PROCESSES_ADDONS_PROCESSES FOREIGN KEY (PROCESS_ID) REFERENCES PROCESSES (ID) ON DELETE CASCADE;

ALTER TABLE PROCESSES_ROLES ADD CONSTRAINT FK_PROCESSES_ROLES_PROCESSES FOREIGN KEY (PROCESS_ID) REFERENCES PROCESSES (ID) ON DELETE CASCADE;

ALTER TABLE TASKS_ADMIN_GROUPS ADD CONSTRAINT FK_TASKS_ADMIN_GROUPS_TASKS FOREIGN KEY (TASK_ID) REFERENCES TASKS (ID) ON DELETE CASCADE;

ALTER TABLE TASKS_ADMIN_USERS ADD CONSTRAINT FK_TASKS_ADMIN_USERS_TASKS FOREIGN KEY (TASK_ID) REFERENCES TASKS (ID) ON DELETE CASCADE;

ALTER TABLE TASKS_EXCLUDED_USERS ADD CONSTRAINT FK_TASKS_EXCLUDED_USERS_TASKS FOREIGN KEY (TASK_ID) REFERENCES TASKS (ID) ON DELETE CASCADE;

ALTER TABLE TASKS_POTENTIAL_GROUPS ADD CONSTRAINT FK_TASKS_POTENTIAL_GROUPS_TASKS FOREIGN KEY (TASK_ID) REFERENCES TASKS (ID) ON DELETE CASCADE;

ALTER TABLE TASKS_POTENTIAL_USERS ADD CONSTRAINT FK_TASKS_POTENTIAL_USERS_TASKS FOREIGN KEY (TASK_ID) REFERENCES TASKS (ID) ON DELETE CASCADE;

ALTER TABLE DEFINITIONS_METADATA ADD CONSTRAINT FK_DEFINITIONS_METADATA FOREIGN KEY (PROCESS_ID, PROCESS_VERSION) REFERENCES DEFINITIONS (ID, VERSION) ON DELETE CASCADE;

CREATE INDEX IDX_ATTACHMENTS_TID ON ATTACHMENTS (TASK_ID);

CREATE INDEX IDX_COMMENTS_TID ON COMMENTS (TASK_ID);

CREATE INDEX IDX_DEFINITIONS_ADDONS_PID_PV ON DEFINITIONS_ADDONS (PROCESS_ID, PROCESS_VERSION);

CREATE INDEX IDX_DEFINITIONS_ANNOTATIONS_PID_PV ON DEFINITIONS_ANNOTATIONS (PROCESS_ID, PROCESS_VERSION);

CREATE INDEX IDX_DEFINITIONS_METADATA_PID_PV ON DEFINITIONS_METADATA (PROCESS_ID, PROCESS_VERSION);

CREATE INDEX IDX_DEFINITIONS_NODES_PID_PV ON DEFINITIONS_NODES (PROCESS_ID, PROCESS_VERSION);

CREATE INDEX IDX_DEFINITIONS_NODES_METADATA_PID_PV ON DEFINITIONS_NODES_METADATA (PROCESS_ID, PROCESS_VERSION);

CREATE INDEX IDX_DEFINITIONS_ROLES_PID_PV ON DEFINITIONS_ROLES (PROCESS_ID, PROCESS_VERSION);

CREATE INDEX IDX_JOBS_PIID ON JOBS (PROCESS_INSTANCE_ID);

CREATE INDEX IDX_MILESTONES_PIID ON MILESTONES (PROCESS_INSTANCE_ID);

CREATE INDEX IDX_NODES_PIID ON NODES (PROCESS_INSTANCE_ID);

CREATE INDEX IDX_PROCESSES_ADDONS_PID ON PROCESSES_ADDONS (PROCESS_ID);

CREATE INDEX IDX_PROCESSES_ROLES_PID ON PROCESSES_ROLES (PROCESS_ID);

CREATE INDEX IDX_TASKS_PIID ON TASKS (PROCESS_INSTANCE_ID);

CREATE INDEX IDX_TASKS_ADMIN_GROUPS_TID ON TASKS_ADMIN_GROUPS (TASK_ID);

CREATE INDEX IDX_TASKS_ADMIN_USERS_TID ON TASKS_ADMIN_USERS (TASK_ID);

CREATE INDEX IDX_TASKS_EXCLUDED_USERS_TID ON TASKS_EXCLUDED_USERS (TASK_ID);

CREATE INDEX IDX_TASKS_POTENTIAL_GROUPS_TID ON TASKS_POTENTIAL_GROUPS (TASK_ID);

CREATE INDEX IDX_TASKS_POTENTIAL_USERS_TID ON TASKS_POTENTIAL_USERS (TASK_ID);


