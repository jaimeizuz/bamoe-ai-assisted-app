CREATE TABLE AUDIT_QUERY (
  IDENTIFIER VARCHAR2(255) NOT NULL,
  GRAPH_QL_DEFINITION CLOB,
  QUERY CLOB
  ,CONSTRAINT AUDIT_QUERY_PKEY PRIMARY KEY (IDENTIFIER)
);

CREATE TABLE JOB_EXECUTION_LOG (
  ID NUMBER(19,0) NOT NULL,
  EVENT_DATE TIMESTAMP(6),
  EXECUTION_COUNTER NUMBER,
  EXPIRATION_TIME TIMESTAMP(6),
  JOB_ID VARCHAR2(255),
  NODE_INSTANCE_ID VARCHAR2(255),
  PRIORITY NUMBER,
  PROCESS_INSTANCE_ID VARCHAR2(255),
  REPEAT_INTERVAL NUMBER(19,0),
  REPEAT_LIMIT NUMBER,
  RETRIES NUMBER,
  SCHEDULED_ID VARCHAR2(255),
  STATUS VARCHAR2(255)
  ,CONSTRAINT JOB_EXECUTION_LOG_PKEY PRIMARY KEY (ID)
);

CREATE TABLE PROCESS_INSTANCE_ERROR_LOG (
  ID NUMBER(19,0) NOT NULL,
  BUSINESS_KEY VARCHAR2(255),
  EVENT_DATE TIMESTAMP(6),
  EVENT_ID VARCHAR2(255),
  EVENT_USER VARCHAR2(255),
  PARENT_PROCESS_INSTANCE_ID VARCHAR2(255),
  PROCESS_ID VARCHAR2(255),
  PROCESS_INSTANCE_ID VARCHAR2(255),
  PROCESS_TYPE VARCHAR2(255),
  PROCESS_VERSION VARCHAR2(255),
  ROOT_PROCESS_ID VARCHAR2(255),
  ROOT_PROCESS_INSTANCE_ID VARCHAR2(255),
  ERROR_MESSAGE VARCHAR2(255),
  NODE_DEFINITION_ID VARCHAR2(255),
  NODE_INSTANCE_ID VARCHAR2(255)
  ,CONSTRAINT PROCESS_INSTANCE_ERROR_LOG_PKEY PRIMARY KEY (ID)
);

CREATE TABLE PROCESS_INSTANCE_NODE_LOG (
  ID NUMBER(19,0) NOT NULL,
  BUSINESS_KEY VARCHAR2(255),
  EVENT_DATE TIMESTAMP(6),
  EVENT_ID VARCHAR2(255),
  EVENT_USER VARCHAR2(255),
  PARENT_PROCESS_INSTANCE_ID VARCHAR2(255),
  PROCESS_ID VARCHAR2(255),
  PROCESS_INSTANCE_ID VARCHAR2(255),
  PROCESS_TYPE VARCHAR2(255),
  PROCESS_VERSION VARCHAR2(255),
  ROOT_PROCESS_ID VARCHAR2(255),
  ROOT_PROCESS_INSTANCE_ID VARCHAR2(255),
  CONNECTION VARCHAR2(255),
  EVENT_DATA VARCHAR2(255),
  EVENT_TYPE VARCHAR2(255),
  NODE_DEFINITION_ID VARCHAR2(255),
  NODE_INSTANCE_ID VARCHAR2(255),
  NODE_NAME VARCHAR2(255),
  NODE_TYPE VARCHAR2(255),
  SLA_DUE_DATE TIMESTAMP(6),
  WORK_ITEM_ID VARCHAR2(255)
  ,CONSTRAINT PROCESS_INSTANCE_NODE_LOG_PKEY PRIMARY KEY (ID)
  ,CONSTRAINT PROCESS_INSTANCE_NODE_LOG_EVENT_TYPE_CHECK CHECK (event_type IN ('ENTER','EXIT','ABORTED','ASYNC_ENTER','OBSOLETE','SKIPPED','ERROR','SLA_VIOLATION','STATE_UPDATED'))
);

CREATE TABLE PROCESS_INSTANCE_STATE_LOG (
  ID NUMBER(19,0) NOT NULL,
  BUSINESS_KEY VARCHAR2(255),
  EVENT_DATE TIMESTAMP(6),
  EVENT_ID VARCHAR2(255),
  EVENT_USER VARCHAR2(255),
  PARENT_PROCESS_INSTANCE_ID VARCHAR2(255),
  PROCESS_ID VARCHAR2(255),
  PROCESS_INSTANCE_ID VARCHAR2(255),
  PROCESS_TYPE VARCHAR2(255),
  PROCESS_VERSION VARCHAR2(255),
  ROOT_PROCESS_ID VARCHAR2(255),
  ROOT_PROCESS_INSTANCE_ID VARCHAR2(255),
  EVENT_TYPE VARCHAR2(255) NOT NULL,
  OUTCOME VARCHAR2(255),
  SLA_DUE_DATE TIMESTAMP(6),
  STATE VARCHAR2(255)
  ,CONSTRAINT PROCESS_INSTANCE_STATE_LOG_PKEY PRIMARY KEY (ID)
  ,CONSTRAINT PROCESS_INSTANCE_STATE_LOG_EVENT_TYPE_CHECK CHECK (event_type IN ('ACTIVE','COMPLETED','SLA_VIOLATION','MIGRATED','STATE_UPDATED','RETRIGGERED'))
);

CREATE TABLE PROCESS_INSTANCE_STATE_ROLES_LOG (
  PROCESS_INSTANCE_STATE_LOG_ID NUMBER(19,0) NOT NULL,
  ROLE VARCHAR2(255)
);

CREATE TABLE PROCESS_INSTANCE_VARIABLE_LOG (
  ID NUMBER(19,0) NOT NULL,
  BUSINESS_KEY VARCHAR2(255),
  EVENT_DATE TIMESTAMP(6),
  EVENT_ID VARCHAR2(255),
  EVENT_USER VARCHAR2(255),
  PARENT_PROCESS_INSTANCE_ID VARCHAR2(255),
  PROCESS_ID VARCHAR2(255),
  PROCESS_INSTANCE_ID VARCHAR2(255),
  PROCESS_TYPE VARCHAR2(255),
  PROCESS_VERSION VARCHAR2(255),
  ROOT_PROCESS_ID VARCHAR2(255),
  ROOT_PROCESS_INSTANCE_ID VARCHAR2(255),
  VARIABLE_ID VARCHAR2(255),
  VARIABLE_NAME VARCHAR2(255),
  VARIABLE_VALUE CLOB
  ,CONSTRAINT PROCESS_INSTANCE_VARIABLE_LOG_PKEY PRIMARY KEY (ID)
);

CREATE TABLE TASK_INSTANCE_ASSIGNMENT_LOG (
  ID NUMBER(19,0) NOT NULL,
  BUSINESS_KEY VARCHAR2(255),
  EVENT_DATE TIMESTAMP(6),
  EVENT_ID VARCHAR2(255),
  EVENT_USER VARCHAR2(255),
  PROCESS_INSTANCE_ID VARCHAR2(255),
  USER_TASK_DEFINITION_ID VARCHAR2(255),
  USER_TASK_INSTANCE_ID VARCHAR2(255),
  ASSIGNMENT_TYPE VARCHAR2(255),
  TASK_NAME VARCHAR2(255)
  ,CONSTRAINT TASK_INSTANCE_ASSIGNMENT_LOG_PKEY PRIMARY KEY (ID)
);

CREATE TABLE TASK_INSTANCE_ASSIGNMENT_USERS_LOG (
  TASK_INSTANCE_ASSIGNMENT_LOG_ID NUMBER(19,0) NOT NULL,
  USER_ID VARCHAR2(255)
);

CREATE TABLE TASK_INSTANCE_ATTACHMENT_LOG (
  ID NUMBER(19,0) NOT NULL,
  BUSINESS_KEY VARCHAR2(255),
  EVENT_DATE TIMESTAMP(6),
  EVENT_ID VARCHAR2(255),
  EVENT_USER VARCHAR2(255),
  PROCESS_INSTANCE_ID VARCHAR2(255),
  USER_TASK_DEFINITION_ID VARCHAR2(255),
  USER_TASK_INSTANCE_ID VARCHAR2(255),
  ATTACHMENT_ID VARCHAR2(255),
  ATTACHMENT_NAME VARCHAR2(255),
  ATTACHMENT_URI VARCHAR2(255),
  EVENT_TYPE NUMBER
  ,CONSTRAINT TASK_INSTANCE_ATTACHMENT_LOG_PKEY PRIMARY KEY (ID)
);

CREATE TABLE TASK_INSTANCE_COMMENT_LOG (
  ID NUMBER(19,0) NOT NULL,
  BUSINESS_KEY VARCHAR2(255),
  EVENT_DATE TIMESTAMP(6),
  EVENT_ID VARCHAR2(255),
  EVENT_USER VARCHAR2(255),
  PROCESS_INSTANCE_ID VARCHAR2(255),
  USER_TASK_DEFINITION_ID VARCHAR2(255),
  USER_TASK_INSTANCE_ID VARCHAR2(255),
  COMMENT_CONTENT VARCHAR2(1000),
  COMMENT_ID VARCHAR2(255),
  EVENT_TYPE NUMBER
  ,CONSTRAINT TASK_INSTANCE_COMMENT_LOG_PKEY PRIMARY KEY (ID)
);

CREATE TABLE TASK_INSTANCE_DEADLINE_LOG (
  ID NUMBER(19,0) NOT NULL,
  BUSINESS_KEY VARCHAR2(255),
  EVENT_DATE TIMESTAMP(6),
  EVENT_ID VARCHAR2(255),
  EVENT_USER VARCHAR2(255),
  PROCESS_INSTANCE_ID VARCHAR2(255),
  USER_TASK_DEFINITION_ID VARCHAR2(255),
  USER_TASK_INSTANCE_ID VARCHAR2(255),
  EVENT_TYPE VARCHAR2(255)
  ,CONSTRAINT TASK_INSTANCE_DEADLINE_LOG_PKEY PRIMARY KEY (ID)
);

CREATE TABLE TASK_INSTANCE_DEADLINE_NOTIFICATION_LOG (
  TASK_INSTANCE_DEADLINE_LOG_ID NUMBER(19,0) NOT NULL,
  PROPERTY_VALUE VARCHAR2(255),
  PROPERTY_NAME VARCHAR2(255) NOT NULL
  ,CONSTRAINT TASK_INSTANCE_DEADLINE_NOTIFICATION_LOG_PKEY PRIMARY KEY (TASK_INSTANCE_DEADLINE_LOG_ID, PROPERTY_NAME)
);

CREATE TABLE TASK_INSTANCE_STATE_LOG (
  ID NUMBER(19,0) NOT NULL,
  BUSINESS_KEY VARCHAR2(255),
  EVENT_DATE TIMESTAMP(6),
  EVENT_ID VARCHAR2(255),
  EVENT_USER VARCHAR2(255),
  PROCESS_INSTANCE_ID VARCHAR2(255),
  USER_TASK_DEFINITION_ID VARCHAR2(255),
  USER_TASK_INSTANCE_ID VARCHAR2(255),
  ACTUAL_USER VARCHAR2(255),
  DESCRIPTION VARCHAR2(255),
  EVENT_TYPE VARCHAR2(255),
  NAME VARCHAR2(255),
  STATE VARCHAR2(255)
  ,CONSTRAINT TASK_INSTANCE_STATE_LOG_PKEY PRIMARY KEY (ID)
);

CREATE TABLE TASK_INSTANCE_VARIABLE_LOG (
  ID NUMBER(19,0) NOT NULL,
  BUSINESS_KEY VARCHAR2(255),
  EVENT_DATE TIMESTAMP(6),
  EVENT_ID VARCHAR2(255),
  EVENT_USER VARCHAR2(255),
  PROCESS_INSTANCE_ID VARCHAR2(255),
  USER_TASK_DEFINITION_ID VARCHAR2(255),
  USER_TASK_INSTANCE_ID VARCHAR2(255),
  VARIABLE_ID VARCHAR2(255),
  VARIABLE_NAME VARCHAR2(255),
  VARIABLE_TYPE VARCHAR2(255),
  VARIABLE_VALUE CLOB
  ,CONSTRAINT TASK_INSTANCE_VARIABLE_LOG_PKEY PRIMARY KEY (ID)
  ,CONSTRAINT TASK_INSTANCE_VARIABLE_LOG_VARIABLE_TYPE_CHECK CHECK (variable_type IN ('INPUT', 'OUTPUT'))
);

ALTER TABLE PROCESS_INSTANCE_STATE_ROLES_LOG ADD CONSTRAINT FK_PROCESS_INSTANCE_STATE_PID FOREIGN KEY (PROCESS_INSTANCE_STATE_LOG_ID) REFERENCES PROCESS_INSTANCE_STATE_LOG (ID) ON DELETE CASCADE;

ALTER TABLE TASK_INSTANCE_ASSIGNMENT_USERS_LOG ADD CONSTRAINT FK_TASK_INSTANCE_ASSIGNMENT_LOG_TID FOREIGN KEY (TASK_INSTANCE_ASSIGNMENT_LOG_ID) REFERENCES TASK_INSTANCE_ASSIGNMENT_LOG (ID) ON DELETE CASCADE;

ALTER TABLE TASK_INSTANCE_DEADLINE_NOTIFICATION_LOG ADD CONSTRAINT FK_TASK_INSTANCE_DEADLINE_TID FOREIGN KEY (TASK_INSTANCE_DEADLINE_LOG_ID) REFERENCES TASK_INSTANCE_DEADLINE_LOG (ID) ON DELETE CASCADE;

CREATE SEQUENCE JOB_EXECUTION_HISTORY_ID_SEQ
  INCREMENT BY 50
  START WITH 1
  CACHE 50
;

CREATE SEQUENCE PROCESS_INSTANCE_ERROR_LOG_SEQ_ID
  INCREMENT BY 50
  START WITH 1
  CACHE 50
;

CREATE SEQUENCE PROCESS_INSTANCE_NODE_LOG_ID_SEQ
  INCREMENT BY 50
  START WITH 1
  CACHE 50
;

CREATE SEQUENCE PROCESS_INSTANCE_STATE_LOG_ID_SEQ
  INCREMENT BY 50
  START WITH 1
  CACHE 50
;

CREATE SEQUENCE PROCESS_INSTANCE_VARIABLE_LOG_ID_SEQ
  INCREMENT BY 50
  START WITH 1
  CACHE 50
;

CREATE SEQUENCE TASK_INSTANCE_ASSIGNMENT_LOG_ID_SEQ
  INCREMENT BY 50
  START WITH 1
  CACHE 50
;

CREATE SEQUENCE TASK_INSTANCE_ATTACHMENT_LOG_ID_SEQ
  INCREMENT BY 50
  START WITH 1
  CACHE 50
;

CREATE SEQUENCE TASK_INSTANCE_COMMENT_LOG_ID_SEQ
  INCREMENT BY 50
  START WITH 1
  CACHE 50
;

CREATE SEQUENCE TASK_INSTANCE_DEADLINE_LOG_ID_SEQ
  INCREMENT BY 50
  START WITH 1
  CACHE 50
;

CREATE SEQUENCE TASK_INSTANCE_STATE_LOG_ID_SEQ
  INCREMENT BY 50
  START WITH 1
  CACHE 50
;

CREATE SEQUENCE TASK_INSTANCE_VARIABLE_LOG_ID_SEQ
  INCREMENT BY 50
  START WITH 1
  CACHE 50
;

CREATE INDEX IX_JEL_JID ON JOB_EXECUTION_LOG (JOB_ID);

CREATE INDEX IX_JEL_PID ON JOB_EXECUTION_LOG (PROCESS_INSTANCE_ID);

CREATE INDEX IX_JEL_STATUS ON JOB_EXECUTION_LOG (STATUS);

CREATE INDEX IX_PIEL_EVENT_DATE ON PROCESS_INSTANCE_ERROR_LOG (EVENT_DATE);

CREATE INDEX IX_PIEL_KEY ON PROCESS_INSTANCE_ERROR_LOG (BUSINESS_KEY);

CREATE INDEX IX_PIEL_PID ON PROCESS_INSTANCE_ERROR_LOG (PROCESS_INSTANCE_ID);

CREATE INDEX IX_PINL_EVENT_DATE ON PROCESS_INSTANCE_NODE_LOG (EVENT_DATE);

CREATE INDEX IX_PINL_KEY ON PROCESS_INSTANCE_NODE_LOG (BUSINESS_KEY);

CREATE INDEX IX_PINL_PID ON PROCESS_INSTANCE_NODE_LOG (PROCESS_INSTANCE_ID);

CREATE INDEX IX_PISL_EVENT_DATE ON PROCESS_INSTANCE_STATE_LOG (EVENT_DATE);

CREATE INDEX IX_PISL_KEY ON PROCESS_INSTANCE_STATE_LOG (BUSINESS_KEY);

CREATE INDEX IX_PISL_PID ON PROCESS_INSTANCE_STATE_LOG (PROCESS_INSTANCE_ID);

CREATE INDEX IX_PISL_STATE ON PROCESS_INSTANCE_STATE_LOG (STATE);

CREATE INDEX IX_PIVL_EVENT_DATE ON PROCESS_INSTANCE_VARIABLE_LOG (EVENT_DATE);

CREATE INDEX IX_PIVL_KEY ON PROCESS_INSTANCE_VARIABLE_LOG (BUSINESS_KEY);

CREATE INDEX IX_PIVL_PID ON PROCESS_INSTANCE_VARIABLE_LOG (PROCESS_INSTANCE_ID);

CREATE INDEX IX_PIVL_VAR_ID ON PROCESS_INSTANCE_VARIABLE_LOG (VARIABLE_ID);

CREATE INDEX IX_UTASL_EVENT_DATE ON TASK_INSTANCE_ASSIGNMENT_LOG (EVENT_DATE);

CREATE INDEX IX_UTASL_KEY ON TASK_INSTANCE_ASSIGNMENT_LOG (BUSINESS_KEY);

CREATE INDEX IX_UTASL_PID ON TASK_INSTANCE_ASSIGNMENT_LOG (PROCESS_INSTANCE_ID);

CREATE INDEX IX_UTASL_UTID ON TASK_INSTANCE_ASSIGNMENT_LOG (USER_TASK_INSTANCE_ID);

CREATE INDEX IX_UTATL_EVENT_DATE ON TASK_INSTANCE_ATTACHMENT_LOG (EVENT_DATE);

CREATE INDEX IX_UTATL_KEY ON TASK_INSTANCE_ATTACHMENT_LOG (BUSINESS_KEY);

CREATE INDEX IX_UTATL_PID ON TASK_INSTANCE_ATTACHMENT_LOG (PROCESS_INSTANCE_ID);

CREATE INDEX IX_UTATL_UTID ON TASK_INSTANCE_ATTACHMENT_LOG (USER_TASK_INSTANCE_ID);

CREATE INDEX IX_UTCL_EVENT_DATE ON TASK_INSTANCE_COMMENT_LOG (EVENT_DATE);

CREATE INDEX IX_UTCL_KEY ON TASK_INSTANCE_COMMENT_LOG (BUSINESS_KEY);

CREATE INDEX IX_UTCL_PID ON TASK_INSTANCE_COMMENT_LOG (PROCESS_INSTANCE_ID);

CREATE INDEX IX_UTCL_UTID ON TASK_INSTANCE_COMMENT_LOG (USER_TASK_INSTANCE_ID);

CREATE INDEX IX_UTDL_EVENT_DATE ON TASK_INSTANCE_DEADLINE_LOG (EVENT_DATE);

CREATE INDEX IX_UTDL_KEY ON TASK_INSTANCE_DEADLINE_LOG (BUSINESS_KEY);

CREATE INDEX IX_UTDL_PID ON TASK_INSTANCE_DEADLINE_LOG (PROCESS_INSTANCE_ID);

CREATE INDEX IX_UTDL_UTID ON TASK_INSTANCE_DEADLINE_LOG (USER_TASK_INSTANCE_ID);

CREATE INDEX IX_UTSL_EVENT_DATE ON TASK_INSTANCE_STATE_LOG (EVENT_DATE);

CREATE INDEX IX_UTSL_KEY ON TASK_INSTANCE_STATE_LOG (BUSINESS_KEY);

CREATE INDEX IX_UTSL_PID ON TASK_INSTANCE_STATE_LOG (PROCESS_INSTANCE_ID);

CREATE INDEX IX_UTSL_STATE ON TASK_INSTANCE_STATE_LOG (STATE);

CREATE INDEX IX_UTSL_UTID ON TASK_INSTANCE_STATE_LOG (USER_TASK_INSTANCE_ID);

CREATE INDEX IX_TAVL_EVENT_DATE ON TASK_INSTANCE_VARIABLE_LOG (EVENT_DATE);

CREATE INDEX IX_TAVL_KEY ON TASK_INSTANCE_VARIABLE_LOG (BUSINESS_KEY);

CREATE INDEX IX_TAVL_PID ON TASK_INSTANCE_VARIABLE_LOG (PROCESS_INSTANCE_ID);

CREATE INDEX IX_TAVL_UTID ON TASK_INSTANCE_VARIABLE_LOG (USER_TASK_INSTANCE_ID);


